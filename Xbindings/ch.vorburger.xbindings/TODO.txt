
* Refactoring to have Binding more clearly express Property to set and expression used to obtain its (one and only) value, thus avoiding Bindings with two Statements conceptually

* Lists!

* Refactor ThreadLocal out into a well separated out new concept based on inspiration from org.eclipse.core.databinding.observable.ObservableTracker

* EMF.xtext, with Unit Test this time.. demo: M2M from one Xtext model to another (think JSON <-> XObjects)

* JFace 0.1 POC

* MUST pass XBindingsXtendTest.testBidiBinding & detect infinite loops

* non-annotated JavaBeans, how to apply Aspect? read AspectJ doc..
	ugly, in XML: http://damnhandy.com/javabean-aspect/

* JFace 1.0
* master detail type bindings
* redo http://www.vogella.com/articles/EclipseDataBinding/article.html#jfacedb_selection

---
* THEORY.txt Doc

* manage Exceptions in bindings, set Validation stuff instead of bubbling up

* ch.vorburger.xbindings split in 
		ch.vorburger.xbindings.core
		ch.vorburger.xbindings.properties (usually not needed! just for tests of the infrastructure)
		[ch.vorburger.xbindings.xtend (split needed?!)]
		ch.vorburger.xbindings.aop
			ch.vorburger.xbindings.beans
			ch.vorburger.xbindings.jface
			ch.vorburger.xbindings.emf
				ch.vorburger.xbindings.emf.xtext
	* src/main/java & src/test/java in core
	* pom.xml

* rename from xbindings to nbindings, "Natural Bindings" ?

* SHOULD sample SWT two text fields bound to same model String property
* SHOULD sample SWT two text fields bound to each other (no model)
* COULD  sample dito in Swing

* COULD EMF without AOP - how to track getters? ask list.. propose new Event?

* MAY use xtend Processed Annotations thing for something like @Bean with built-in (no AOP) Change and getter access tracking

* WHY lazy evaluation, like JavaFX supports - needed?
* COULD handle field interdependencies and automatically order ???

* COULD apply to JPA, for Queries, like LINQ

* http://modelmapper.org/

